#!/usr/bin/env python

import PreludeEasy
from PreludeEasy import ClientEasy, ConnectionPool, Connection, IDMEF
import gobject, gtk, pynotify

from PreludeNotify import ManagerConnection, notifyaction, pnstatusicon, pnconfig, threshold, x11idle, heartbeat

import sys


class Env:
        pass

env = Env()
env.gloop = gobject.MainLoop()
env.config = pnconfig.PnConfig(env)
env.notify = notifyaction.PreludeNotify(env)
env.hbmonitor = heartbeat.HeartbeatMonitor(env)
env.is_idle = False

idle = x11idle.X11Idle()
statusicon = pnstatusicon.PreludeStatusIcon(env.gloop, env.config)


def idle_timer_cb():
        idle_timeout = env.config.get("general","x11_idle_timeout")
        if idle_timeout:
                if idle.IdleTimeGet() < int(env.config.get("general","x11_idle_timeout")):
                        env.is_idle = False
                        env.notify.flush()
                        statusicon.SeenAlerts()
                else:
                        env.is_idle = True
                        statusicon.MissedAlerts()

        return True


def _expire_cb(item):
    idmef = item.idmef

    if item.count > 1:
        cstr = "%d x " % item.count
    else:
        cstr = ""

    src = cstr + (idmef.Get("alert.source(0).node.address(0).address") or "(unknown)")
    cl = idmef.Get("alert.classification.text") or "(unknown)"

    desc = idmef.Get("alert.assessment.impact.description")

    if desc:
        desc = "<b>" + cl + "</b>\n" + desc
    else:
        desc = cl

    env.notify.run(idmef.Get("alert.assessment.impact.severity"), item.messageid, src, desc)


env.expire_cb = _expire_cb

env.thresholding = threshold.Threshold(env.config.get("general","threshold_timeout"), env.expire_cb)

filter = env.config.get("idmef", "filter")
env.criteria = None
if not filter == "":
        env.criteria = PreludeEasy.IDMEFCriteria(filter)

env.managercon = ManagerConnection.Session(env, env.config.get("idmef", "profile"))
for addr in env.config.get("manager","addresses").split(","):
        env.managercon.addAddress(addr)

gobject.timeout_add(1000, idle_timer_cb)
env.gloop.run()

