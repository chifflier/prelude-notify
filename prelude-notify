#!/usr/bin/env python

import PreludeEasy
from PreludeEasy import ClientEasy, ConnectionPool, Connection, IDMEF
import gobject, gtk, pynotify

from PreludeNotify import notifyaction, pnstatusicon, pnconfig, ProfileRegister, threshold, x11idle, heartbeat

import sys


class Env:
        pass

env = Env()
env.gloop = gobject.MainLoop()
env.config = pnconfig.PnConfig()
env.notify = notifyaction.PreludeNotify(env)
env.is_idle = False

idle = x11idle.X11Idle()
hbmonitor = heartbeat.HeartbeatMonitor(env)
statusicon = pnstatusicon.PreludeStatusIcon(env.gloop, env.config)


def idle_timer_cb():
        if idle.IdleTimeGet() < int(env.config.get("general","X11idle_timeout")):
                env.is_idle = False
                env.notify.flush()
                statusicon.SeenAlerts()
        else:
                env.is_idle = True
                statusicon.MissedAlerts()

        return True


def _expire_cb(item):
    idmef = item.idmef

    if item.count > 1:
        cstr = "%d x " % item.count
    else:
        cstr = ""

    theme = env.config.get("ui", "theme")
    baseuri = "file://" + pnconfig.themespath + theme + "/"
    severity = idmef.Get("alert.assessment.impact.severity")

    urgency = None
    imageuri = None
    for i in (("high", pynotify.URGENCY_CRITICAL),
              ("medium", pynotify.URGENCY_NORMAL),
              ("low", pynotify.URGENCY_LOW),
              ("info", None)):
        if severity == i[0]:
            imageuri = baseuri + i[0] + ".png"
            urgency = i[1]
            break

    if severity:
        imageuri = "file://" + pnconfig.themespath + theme + "/" + severity + ".png"
    else:
        imageuri = None

    src = cstr + (idmef.Get("alert.source(0).node.address(0).address") or "(unknown)")
    cl = idmef.Get("alert.classification.text") or "(unknown)"

    desc = idmef.Get("alert.assessment.impact.description")

    if desc:
        desc = "<b>" + cl + "</b>\n" + desc
    else:
        desc = cl

    env.notify.run(imageuri, item.messageid, urgency, src, desc)


thresholding = threshold.Threshold(env.config.get("general","threshold_timeout"),_expire_cb)

filter = env.config.get("idmef", "filter")
criteria = None
if not filter == "":
        criteria = PreludeEasy.IDMEFCriteria(filter)


c = PreludeEasy.ClientEasy(env.config.get("idmef", "profile"), PreludeEasy.Client.IDMEF_READ)
c.SetFlags(0)

def doConnect(con):
	#try:
	con.Connect(c, ClientEasy.IDMEF_READ)
	#except:
	#	ProfileRegister.CreateProfile(c, ClientEasy.IDMEF_READ, env.config.get("idmef", "profile"))
	#	sys.exit(1)

        env.notify.run(None, None, pynotify.URGENCY_LOW, "Manager Connection successfull", "With Prelude-Manager <b>%s</b>" % con.GetPeerAddr())

def handleDisconnect(con, err=None):
    env.notify.run(None, None, pynotify.URGENCY_CRITICAL, "Manager Connection interrupted", "With Prelude-Manager <b>%s</b>" % con.GetPeerAddr())
    gobject.timeout_add(10000, doConnect, con)

heartbeat_table = {}

def io_cb(fd, cond, con):
    if cond & gobject.IO_IN:
        try:
                idmef = con.RecvIDMEF()
        except PreludeEasy.PreludeError, err:
            if err.GetErrorCode() == -8388614:
                handleDisconnect(con)
                return False

        if idmef.Get("heartbeat.create_time"):
                hbmonitor.heartbeat(idmef)

        elif (not criteria) or (criteria.match(idmef)):
                 thresholding.thresholdMessage(idmef)

    if cond & gobject.IO_ERR or cond & gobject.IO_HUP:
        handleDisconnect(con)
        return False

    return True


manager_addresses = env.config.get("manager", "addresses").split(',')
for addr in manager_addresses:
        con = Connection(addr)
        doConnect(con)
        gobject.io_add_watch(con.GetFd(), gobject.IO_IN|gobject.IO_PRI|gobject.IO_HUP|gobject.IO_NVAL|gobject.IO_ERR, io_cb, con)


c.Start()
gobject.timeout_add(1000, idle_timer_cb)
env.gloop.run()

