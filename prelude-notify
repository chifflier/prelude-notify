#!/usr/bin/env python

import PreludeEasy
from PreludeEasy import ClientEasy, ConnectionPool, Connection, IDMEF
import gobject, gtk, pynotify

from PreludeNotify import notifyaction, pnstatusicon, pnconfig, threshold, x11idle

gloop = gobject.MainLoop()
config = pnconfig.PnConfig()
Notify = notifyaction.PreludeNotify(config)
idle = x11idle.X11Idle()
statusicon = pnstatusicon.PreludeStatusIcon(gloop, config)

def idle_timer_cb():
        if idle.IdleTimeGet() < 5:
                statusicon.SeenAlerts()
        else:
                statusicon.MissedAlerts()

        return True


def _expire_cb(item):
    idmef = item.idmef

    if item.count > 1:
        cstr = "%d x " % item.count
    else:
        cstr = ""

    baseuri = "file://" + pnconfig.themespath + config.get("ui", "theme") + "/"
    severity = idmef.Get("alert.assessment.impact.severity")

    urgency = None
    imageuri = None
    for i in (("high", pynotify.URGENCY_CRITICAL),
              ("medium", pynotify.URGENCY_NORMAL),
              ("low", pynotify.URGENCY_LOW),
              ("info", None)):
        if severity == i[0]:
            imageuri = baseuri + i[0] + ".png"
            urgency = i[1]
            break

    if severity:
        imageuri = "file://" + pnconfig.themespath + config.get("ui", "theme") + "/" + severity + ".png"
    else:
        imageuri = None

    src = cstr + (idmef.Get("alert.source(0).node.address(0).address") or "(unknown)")
    cl = idmef.Get("alert.classification.text") or "(unknown)"

    desc = idmef.Get("alert.assessment.impact.description")

    if desc:
        desc = "<b>" + cl + "</b>\n" + desc
    else:
        desc = cl

    Notify.run(imageuri, item.messageid, urgency, src, desc)


thresholding = threshold.Threshold(_expire_cb)

filter = config.get("idmef", "filter")
criteria = None
if not filter == "":
        criteria = PreludeEasy.IDMEFCriteria(filter)


c = PreludeEasy.ClientEasy(config.get("idmef", "profile"), PreludeEasy.Client.IDMEF_READ)
c.SetFlags(0)

def doConnect(con):
    con.Connect(c, ClientEasy.IDMEF_READ)
    Notify.run(None, None, pynotify.URGENCY_LOW, "Manager Connection successfull", "With Prelude-Manager <b>%s</b>" % con.GetPeerAddr())

def handleDisconnect(con, err=None):
    Notify.run(None, None, pynotify.URGENCY_CRITICAL, "Manager Connection interrupted", "With Prelude-Manager <b>%s</b>" % con.GetPeerAddr())
    gobject.timeout_add(10000, doConnect, con)

def io_cb(fd, cond, con):
    if cond & gobject.IO_IN:
        try:
                idmef = con.RecvIDMEF()
        except PreludeEasy.PreludeError, err:
            if err.GetErrorCode() == -8388614:
                handleDisconnect(con)
                return False

        if not idmef.Get("heartbeat.create_time"):
            thresholding.thresholdMessage(idmef)

        ret = c.RecvIDMEF(idmef, 100)
        if ret and not idmef.Get("heartbeat.create_time"):
                if not criteria:
                        thresholding.thresholdMessage(idmef)
                else:
                        if criteria.match(idmef):
                                thresholding.thresholdMessage(idmef)

    if cond & gobject.IO_ERR or cond & gobject.IO_HUP:
        handleDisconnect(con)
        return False

    return True


manager_addresses = config.get("manager", "addresses").split(',')
for addr in manager_addresses:
        con = Connection(addr)
        doConnect(con)
        gobject.io_add_watch(con.GetFd(), gobject.IO_IN|gobject.IO_PRI|gobject.IO_HUP|gobject.IO_NVAL|gobject.IO_ERR, io_cb, con)


c.Start()
gobject.timeout_add(1000, idle_timer_cb)
gloop.run()

